if (!file.exists(filename)) download(url,filename)
load(filename)
library(rafalib)
mypar()
dat <- list(Treatment=x,Control=y)
barplot(dat, xlab="Group",ylab="Response",cex=0)
barplot(dat, xlab="Group",ylab="Response")
barplot(dat)
barplot(dat, add=TRUE)
#In this case it's more appropriate to create boxplots,
# as they show how the data is distributed inside
# each group
boxplot(dat,xlab="Group",ylab="Response",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
#This problem is compounded when the data has outliers
# or very large tails
library(downloader)
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig3.RData"
filename <- "fig3.RData"
if (!file.exists(filename)) download(url, filename)
load(filename)
library(rafalib)
mypar(1,2)
dat <- list(Treatment=x,Control=y)
#The boxplots will show the quantiles and the outliers
boxplot(dat,xlab="Group",ylab="Response",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
boxplot(dat,xlab="Group",ylab="Response",log="y",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
#The boxplots will show the quantiles and the outliers
mypar(1,2)
boxplot(dat,xlab="Group",ylab="Response",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
boxplot(dat,xlab="Group",ylab="Response",log="y",cex=0)
stripchart(dat,vertical=TRUE,method="jitter",pch=16,add=TRUE,col=1)
#Just showing the regression line isn't enough
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig4.RData"
filename <- "fig4.RData"
if (!file.exists(filename)) download(url, filename)
load(filename)
mypar(1,2)
plot(x,y,lwd=2,type="n")
fit <- lm(y~x)
abline(fit$coef,lwd=2)
b <- round(fit$coef,4)
text(78, 200, paste("y =", b[1], "+", b[2], "x"), adj=c(0,0.5))
rho <- round(cor(x,y),4)
text(78, 187,expression(paste(rho," = 0.8567")),adj=c(0,0.5))
plot(x,y,lwd=2)
fit <- lm(y~x)
abline(fit$coef,lwd=2)
#Using paired barplots to compare before-after groups
# is also a bad idea.
set.seed(12201970)
before <- runif(6, 5, 8)
after <- rnorm(6, before*1.05, 2)
li <- range(c(before, after))
ymx <- max(abs(after-before))
mypar(1,2)
plot(before, after, xlab="Before", ylab="After",
ylim=li, xlim=li)
abline(0,1, lty=2, col=1)
plot(before, after-before, xlab="Before", ylim=c(-ymx, ymx),
ylab="Change (After - Before)", lwd=2)
abline(h=0, lty=2, col=1)
#You can also use line plots and boxplots
z <- rep(c(0,1), rep(6,2))
mypar(1,2)
plot(z, c(before, after),
xaxt="n", ylab="Response",
xlab="", xlim=c(-0.5, 1.5))
axis(side=1, at=c(0,1), c("Before","After"))
segments(rep(0,6), before, rep(1,6), after, col=1)
boxplot(before,after,names=c("Before","After"),ylab="Response")
##Now make alternative plot
plot(x[,1],x[,2],xlab="log Dose",ylab="Proportion survived",ylim=c(0,1),
type="l",lwd=2,col=1)
lines(x[,1],x[,3],lwd=2,col=2)
lines(x[,1],x[,4],lwd=2,col=3)
legend(1,0.4,c("Drug A","Drug B","Drug C"),lwd=2, col=1:3)
#Please, don't use 3D graphs
##First read data
library(downloader)
filename <- "fig8dat.csv"
url <- "https://github.com/kbroman/Talk_Graphs/raw/master/R/fig8dat.csv"
if (!file.exists(filename)) download(url, filename)
x <- read.table(filename, sep=",", header=TRUE)
##Now make alternative plot
plot(x[,1],x[,2],xlab="log Dose",ylab="Proportion survived",ylim=c(0,1),
type="l",lwd=2,col=1)
lines(x[,1],x[,3],lwd=2,col=2)
lines(x[,1],x[,4],lwd=2,col=3)
legend(1,0.4,c("Drug A","Drug B","Drug C"),lwd=2, col=1:3)
##Now make alternative plot
mypar()
plot(x[,1],x[,2],xlab="log Dose",ylab="Proportion survived",ylim=c(0,1),
type="l",lwd=2,col=1)
lines(x[,1],x[,3],lwd=2,col=2)
lines(x[,1],x[,4],lwd=2,col=3)
legend(1,0.4,c("Drug A","Drug B","Drug C"),lwd=2, col=1:3)
#Use less digits
heights <- cbind(rnorm(8,73,3),rnorm(8,73,3),rnorm(8,80,3),
rnorm(8,78,3),rnorm(8,78,3))
colnames(heights)<-c("SG","PG","C","PF","SF")
rownames(heights)<- paste("team",1:8)
heights
round(heights,1)
#Robust Summaries#
set.seed(1)
x=c(rnorm(100,0,1)) ##real distribution
x[23] <- 100 ##mistake made in 23th measurement
boxplot(x)
cat("The average is",mean(x),"and the SD is",sd(x))
#better metrics in this case would be the median
# and the median average deviation (MAD)
median(x)
mad(x)
#Spearman correlation (reprise)
set.seed(1)
x=c(rnorm(100,0,1)) ##real distribution
x[23] <- 100 ##mistake made in 23th measurement
y=c(rnorm(100,0,1)) ##real distribution
y[23] <- 84 ##similar mistake made in 23th measurement
library(rafalib)
mypar()
plot(x,y,main=paste0("correlation=",round(cor(x,y),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
?rank
#x and y should not be correlated at all, but they
# look correlated
#The Spearman correlation follows the general idea
# of median and MAD, that of using quantiles.
#The idea is simple: we convert each dataset to
# ranks and then compute correlation:
mypar(1,2)
plot(x,y,main=paste0("correlation=",round(cor(x,y),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
plot(rank(x),rank(y),main=paste0("correlation=",round(cor(x,y,method="spearman"),3)),pch=21,bg=1,xlim=c(-3,100),ylim=c(-3,100))
abline(0,1)
#symmetry of log ratios
x <- 2^(rnorm(100))
y <- 2^(rnorm(100))
ratios <- x / y
mypar(1,2)
hist(ratios)
logratios <- log2(ratios)
hist(logratios)
#ex1:
data(ChickWeight)
head(ChickWeight)
plot( ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
#ex1:
mypar()
plot( ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
chick = reshape(ChickWeight, idvar=c("Chick","Diet"), timevar="Time",
direction="wide")
head(chick)
chick = na.omit(chick)
#q1:
mean(weight.4)
#q1:
mean(chick$weight.4)
#q1:
mean(chick$weight.4)/median(chick$weight.4)
c4<-c(chick$weight.4, 3000)
mean(c4)/median(c4)
mean(c4)/median(chick$weight.4)
mean(c4)/mean(chick$weight.4)
#q2:
median(c4)/median(chick$weight.4)
#q3:
sd(c4)/sd(chick$weight.4)
#q4:
mad(c4)/mad(chick$weight.4)
plot(chick$weight.4, chick$weight.21)
cor(chick$weight.4, chick$weight.21,method="spearman")
drugcorr<-cor(c4, chick$weight.21,method="spearman")
actcorr<-cor(chick$weight.4, chick$weight.21,method="spearman")
drugcorr/actcorr
drugcorr<-cor(c4, c(chick$weight.21,3000),method="spearman")
drugcorr/actcorr
#q5:
plot(chick$weight.4, chick$weight.21)
c21<-c(chick$weight.21,3000)
drugcorr<-cor(c4, c21,method="spearman")
actcorr<-cor(chick$weight.4, chick$weight.21,method="spearman")
drugcorr/actcorr
drugcorr
actcorr
#q5:
plot(chick$weight.4, chick$weight.21)
c21<-c(chick$weight.21,3000)
drugcorr<-cor(c4, c21)
actcorr<-cor(chick$weight.4, chick$weight.21)
drugcorr/actcorr
?rank
#Wilcoxon Rank Sum Test#
#Like the mean and the standard dev., the t-test is
# susceptible to outliers.
#The Wilcoxon test is an alternative to the t-test
# that is resilient to outliers.
set.seed(779) ##779 picked for illustration purposes
N=25
x<- rnorm(N,0,1)
y<- rnorm(N,0,1)
x[1] <- 5
x[2] <- 7
cat("t-test pval:",t.test(x,y)$p.value)
cat("Wilcox test pval:",wilcox.test(x,y)$p.value)
#The basic idea behind the Wilcoxon test is to:
#   1) combine all the data
#   2) turn the values into ranks
#   3) separate them back into their groups, and
#   4) compute the sum or average rank and
#         perform a test.
library(rafalib)
mypar(1,2)
stripchart(list(x,y),vertical=TRUE,ylim=c(-7,7),ylab="Observations",pch=21,bg=1)
abline(h=0)
xrank<-rank(c(x,y))[seq(along=x)]
yrank<-rank(c(x,y))[-seq(along=y)]
stripchart(list(xrank,yrank),vertical=TRUE,ylab="Ranks",pch=21,bg=1,cex=1.25)
ws <- sapply(x,function(z) rank(c(z,y))[1]-1)
text( rep(1.05,length(ws)), xrank, ws, cex=0.8)
W<-sum(ws)
n1<-length(x);n2<-length(y)
Z <- (mean(ws)-n2/2)/ sqrt(n2*(n1+n2+1)/12/n1)
print(Z)
#ex2
data(ChickWeight)
head(ChickWeight)
plot( ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
mypar()
plot( ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
chick = reshape(ChickWeight, idvar=c("Chick","Diet"), timevar="Time",
direction="wide")
head(chick)
chick=na.omit(chick)
#q1:
x<-filter(chick, Diet=="1")
head(chick$Diet)
#q1:
x<-filter(chick, Diet==1)
?select
names(chick)
#q1:
x<-chick$weight.4
names(x)
?filter
#q1:
x<-filter(ChickWeight, Diet==1)
#q1:
x<-filter(ChickWeight, Diet=="1")
head(ChickWeight$Diet)
#ex2
data(ChickWeight)
head(ChickWeight)
mypar()
plot( ChickWeight$Time, ChickWeight$weight, col=ChickWeight$Diet)
chick = reshape(ChickWeight, idvar=c("Chick","Diet"), timevar="Time",
direction="wide")
head(chick)
chick=na.omit(chick)
#q1:
x<-filter(chick, Diet=="1")
type(chick)
head(select(chick, Diet))
head(chick[1])
head(chick[2])
head(chick[2]==1)
head(chick[2, 5])
head(chick(Diet==1))
head(chick[Diet==1])
#q1:
x<-filter(as.data.frame(chick), Diet=="1")
as.data.frame?
p
?as.data.frame
?nfnGroupedData
??nfnGroupedData
cc<-as.data.frame(chick)
names(cc)
x<-filter(cc, Diet=="1")
x<-filter(cc, "Diet"=="1")
head(x)
length(x)
dim(x)
x<-x$weight.4
x<-filter(cc, "Diet"=="1")$weight.
x<-filter(cc, "Diet"=="1")$weight.4
x<-filter(cc, "Diet"==1)$weight.4
x<-filter(cc, "Diet"==1)
x
cc
chick
?filter
dat<-read.csv("femaleMiceWeights.csv")
cnames<-colnames(dat)
twt<-dat[12,2]
elf<-dat$Bodyweight[11]
nMice<-length(dat$Diet)
meanHF<-mean(dat[13:24,2])
set.seed(1)
nrandMouse<-dat$Bodyweight[sample(13:24,size=1)]
controls<-filter(dat,Diet=="chow")
library(dplyr)
controls<-filter(dat,Diet=="chow")
#q1:
cc<-as.data.frame(chick)
x<-filter(cc, "Diet"==1) #dplyr
x<-filter(cc, Diet==1) #dplyr
x<-x$weight.4
y<-filter(cc, Diet==4)
y<-y$weight.4
t.test(x,y)
wilcox.test(x,y)
length(x)
x[17]<-100
length(x)
length(y)
t.test(x,y)
t.test(x,y)$p.value
x[17]<-200
t.test(x,y)$p.value
#q2:
wilcox.test(x,y)
#q2:
wilcox.test(x,y)$p.value
#q3:
library(rafalib)
mypar(1,3)
boxplot(x,y)
boxplot(x,y+10)
boxplot(x,y+100)
t.test(x,y+10)$statistic - t.test(x,y+100)$statistic
t10<-t.test(x,y+10)$statistic
t100<-t.test(x,y+100)$statistic
t10-t100
#q3:
x<-filter(cc, Diet==1) #dplyr
x<-x$weight.4
library(rafalib)
mypar(1,3)
boxplot(x,y)
boxplot(x,y+10)
boxplot(x,y+100)
t10<-t.test(x,y+10)$statistic
t100<-t.test(x,y+100)$statistic
t10-t100
#q4:
w10<-wilcox.test(x,y+10)$statistic
w100<-wilcox.test(x,y+100)$statistic
w10-w100
#Il test di Wilcoxon è più debole del t-test
# nel caso in cui i campioni siano di piccole dimensioni,
# anche quando la differenza tra i due è elevata
wilcox.test(c(1,2,3), c(4,5,6))$statistic
#Il test di Wilcoxon è più debole del t-test
# nel caso in cui i campioni siano di piccole dimensioni,
# anche quando la differenza tra i due è elevata
wilcox.test(c(1,2,3), c(4,5,6))$p.value
#q6:
wilcox.test(c(1,2,3), c(400,500,600))$p.value
library(swirl)
swirl()
sample(colors(), 10)
pal<-colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(seq(0, 1, len=6))
p1<-colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xCC
p2<-colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<-colorRampPalette(c("blue", "green"), alpha=0.5)
p3(5)
plot(x, y, pch=19, col=rgb(0, 0.5, 0.5))
plot(x, y, pch=19, col=rgb(0, 0.5, 0.5, 0.3))
cols<-brewer.pal(3, "BuGn")
showMe(cols)
pal(colorRampPalette((cols)))
pal<-colorRampPalette((cols))
pal<-colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1(20))
str(mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg, color=drv)
qplot(displ, hwy, data=mpg, color=drv, geom=c("point", "smooth"))
qplot(y=hwy, data=mpg, color=drv)
myhigh
qplot(drv, hwy, data=mpg, geom="boxplot")
qplot(drv, hwy, data=mpg, geom="boxplot", color=manufacturer)
qplot(hwy, data=mpg, fill=drv)
qplot(displ, hwy, data=mpg, facets=.~drv)
qplot(hwy, data=mpg, facets=drv~., binwidth=2)
qplot(displ, hwy, data=mpg, geom=c("point", "smooth"), facets=.~drv)
g<-ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_ppoint()
g+geom_point()
(g+geom_point())+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
ghd
v
head(x)
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink", size=4, alpha=1/2)
g+geom_point(size=4, alpha=1/2, aes(color=drv))
g+geom_point(size=4, alpha=1/2, aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement", y="Hwy Mileage")
g+geom_point(aes(color=drv), size=2, alpha=1/2)+geom_smooth(size=4, linetype=3, method="lm", se=FALSE)
g+geom_point(color=drv)+theme_bw(base_family="Times")
g+geom_point(aes(color=drv))+theme_bw(base_family="Times")
plot(myx, myy, type="l", ylim=c(-3, 3))
ggplot(testdat, aes(x=myx, y=myy))
g<-ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line(ylim=c(-3, 3))
g+geom_line()+ylim(-3, 3)
g+geom_line()+coord_cartesian(ylim=c(-3, 3))
g<-ggplot(mpg, color=factor(year))
g<-ggplot(mpg, aes(x=displ, y=hwy, color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")
g+geom_point()+facet_grid(drv~cyl, margins=TRUE)+geom_smooth(method="lm", se=FALSE, size=2, color="black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
library(swirl)
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut())
qplot(price, data=diamonds, binwidth=18497/30, fill=cut
)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut)
play()
qplot(price, data=diamonds, geom="density", color=size)
names(diamonds)
qplot(price, data=diamonds, geom="density", color=carat)
qplot(price, data=diamonds, geom="density", color=color)
qplot(price, data=diamonds, geom="density", color=clarity)
nxt()
qplot(carat, price, data=dataset)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
play()
qplot(carat, price, data=diamonds, color=cut)
nxt()
qplot(carat, price, data=diamonds, color=cut, geom_smooth="lm")
qplot(carat, price, data=diamonds, color=cut, geom_smooth(method="lm"))
qplot(carat, price, data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut()) + geom_smooth(method="lm")
qplot(carat, price, data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g<-ggplot(diamonds, aes(depth, price))
summary(g)
g+geom_point(alpha=1/3)
cutpoints<-quantile(diamonds$carat, seq(0, 1, length=4), na.rm=TRUE)
cutpoints
diamonds$car2<-cut(diamonds$carat, cutpoints)
g<-ggplot(diamonds, aes(depth, price))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
myd
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price))+geom_boxplot()+facet_grid(.~cut)
library(swirl)
rm(list=ls())
install_course_github("kosukeimai", "qss-swirl")
swirl::install_course("Advanced R Programming")
swirl::install_course("R Programming")
install_course("Regular Expressions")
install_course("Regression Models")
swirl::install_course("The R Programming Environment")
swirl::install_course("Statistical Inference")
swirl::install_course("A_(very)_short_introduction_to_R")
swirl::install_course("Getting_and_Cleaning_Data")
mean(mtcars$mpg)
install.packages("shiny")
library(digest)
detach("package:digest", unload = TRUE)
install.packages("tidyverse")
help("iris")
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
detach("package:BiocInstaller", unload = TRUE)
update.packages()
old.packages()
help(package="ggplot2")
browseVignettes("ggplot2")
help(package="devtools")
install.packages("KernSmooth")
library("KernSmooth")
